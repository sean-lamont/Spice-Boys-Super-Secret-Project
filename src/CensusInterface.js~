var CENSUS_URL_BASE     = 'http://stat.data.abs.gov.au/sdmx-json/data/';
var CENSUS_URL_SUFFIX   = '/all?detail=Full&dimensionAtObservation=AllDimensions';

var QUERIES = {
    SUBURB_POPULATION:      1,
    RENT_BY_SUBURB:         2,
    INCOME_BY_HOUSEHOLD:    3,
};

var CENSUS_CODES = {
    1:  "ABS_C16_T01_SA",
    2:  "ABS_C16_T26_SA",
    3:  "ABS_C16_T21_SA"
};

var QUERY_TYPE = {
    1:  '/3.TT.8.SA2.',
    2:  '/TOT.TOT.8.SA2.',
    3:  '/TOT.TOT.8.SA2.'
};

var SUBURBS = SuburbCodes;

var ACT_POPULATION              = 397397;
var ACT_AVG_HOUSEHOLD_INCOME    = 2070;
var ACT_AVG_RENT                = 380;

function get_code(name){
    for (i in SUBURBS){
        if (SUBURBS[i].name == name){
            return SUBURBS[i].code;
        }
    }
    return null;
}

function get_json(url){
    var j;
    $.ajax({
        url: url,
        dataType: 'json',
        async: false,
        success: function(data){
            j = data;
        }
    });
    return j;
}

function get_stat(query, suburb_name){
    if (query == 2){
        // Get total
        var url = CENSUS_URL_BASE + CENSUS_CODES[query] + QUERY_TYPE[query] + get_code(suburb_name) + CENSUS_URL_SUFFIX;
        var j = get_json(url);

        var total = j.dataSets[0].observations["0:0:0:0:0:0"][0];

        var cumulative = 0;
        var final;

        for (b = 1; b < 24; b++){

            var url_string = CENSUS_URL_BASE + CENSUS_CODES[query] + "/TOT." + b + ".8.SA2." + get_code(suburb_name) + CENSUS_URL_SUFFIX;

            var json = get_json(url_string);

            var result = json.dataSets[0].observations["0:0:0:0:0:0"][0];

            // check if the median sits in this range
            if (cumulative < total / 2 && (cumulative + result) >= total / 2){
                final = b;
                break;
            }

            cumulative += result;
        }

        // I'm so sorry whoever is reading this, it just makes it master than doing another query
        // I could have used a dictionary or whatever but idk im just lazy I guess.
        switch (final){
             case 1:    return "0";
             case 2:    return "< $75";
             case 3:    return "$82";
             case 4:    return "$112";
             case 5:    return "$132";
             case 6:    return "$162";
             case 7:    return "$182";
             case 8:    return "$212";
             case 9:    return "$232";
             case 10:   return "$262";
             case 11:   return "$282";
             case 12:   return "$312";
             case 13:   return "$332";
             case 14:   return "$362";
             case 15:   return "$382";
             case 16:   return "$412";
             case 17:   return "$432";
             case 18:   return "$500";
             case 19:   return "$600";
             case 20:   return "$700";
             case 21:   return "$800";
             case 22:   return "$900";
             case 23:   return "> $900";
        }

    } else if (query == 3){ // properly handle avg household income
        // Get total
        var url = CENSUS_URL_BASE + CENSUS_CODES[query] + QUERY_TYPE[query] + get_code(suburb_name) + CENSUS_URL_SUFFIX;
        var j = get_json(url);

        var total = j.dataSets[0].observations["0:0:0:0:0:0"][0];

        var cumulative = 0;
        var final;

        for (b = 3; b < 23; b++){

            var url_string = b < 10 ?
                CENSUS_URL_BASE + CENSUS_CODES[query] + "/TOT.0" + b + ".8.SA2." + get_code(suburb_name) + CENSUS_URL_SUFFIX :
                CENSUS_URL_BASE + CENSUS_CODES[query] + "/TOT." + b + ".8.SA2." + get_code(suburb_name) + CENSUS_URL_SUFFIX;

            var json = get_json(url_string);

            var result = json.dataSets[0].observations["0:0:0:0:0:0"][0];

            // check if the median sits in this range
            if (cumulative < total / 2 && (cumulative + result) >= total / 2){
                final = b;
                break;
            }

            cumulative += result;
        }

        // sorry again
        switch (final){
             case 3:    return "< $150";
             case 4:    return "$225";
             case 5:    return "$350";
             case 6:    return "$450";
             case 7:    return "$575";
             case 8:    return "$725";
             case 9:    return "$900";
             case 10:   return "1125";
             case 11:   return "$1375";
             case 12:   return "$1625";
             case 13:   return "$1875";
             case 14:   return "$2250";
             case 15:   return "2750";
             case 16:   return "$3250";
             case 17:   return "$3750";
             case 18:   return "$4250";
             case 19:   return "$4750";
             case 20:   return "$5500";
             case 21:   return "$7000";
             case 22:   return "> $8000";
        }

    } else {

        var url_string = CENSUS_URL_BASE + CENSUS_CODES[query] + QUERY_TYPE[query] + get_code(suburb_name) + CENSUS_URL_SUFFIX;

        var json;
        $.ajax({
            url: url_string,
            dataType: 'json',
            async: false,
            success: function(data){
                json = data;
            }
        });

        return json.dataSets[0].observations["0:0:0:0:0:0"][0];
    }

}
